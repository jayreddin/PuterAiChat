{"chunk":31,"numChunks":84,"fileHash":"El6foAc1cQ0gdsDTMfa4vfsgZ6DJGHS6FzgKj2FOX9U=","filePath":"attached_assets/Puter.md","content":"puter.fs.upload(items, dirPath, options)\n```\n\n## Parameters\n#### `items` (Array) (required)\nThe items to upload to the Puter filesystem. `items` can be an `InputFileList`, `FileList`, `Array` of `File` objects, or an `Array` of `Blob` objects.\n\n#### `dirPath` (String) (optional)\nThe path of the directory to upload the items to. If not set, the items will be uploaded to the app's root directory.\n\n#### `options` (Object) (optional)\nA set of key/value pairs that configure the upload process. \n\n\n## Return value\nReturns a promise that resolves to an array of file objects of the uploaded files.\n\n## Examples\n\n<strong class=\"example-title\">Upload a file from a file input</strong>\n\n```html;fs-upload\n<html>\n<body>\n    <script src=\"https://js.puter.com/v2/\"></script>\n    <input type=\"file\" id=\"file-input\" />\n    <script>\n        // File input\n        let fileInput = document.getElementById('file-input');\n\n        // Upload the file when the user selects it\n        fileInput.onchange = () => {\n            puter.fs.upload(fileInput.files).then((file) => {\n                puter.print(`File uploaded successfully to: ${file.path}`);                \n            })\n        };\n    </script>\n</body>\n</html>\n```\n\n\n<!--\nFile: FS/write.md\n-->\n\nWrites data to a specified file path. This method is useful for creating new files or modifying existing ones in the Puter cloud storage.\n\n## Syntax\n\n```js\nputer.fs.write(path)\nputer.fs.write(path, data)\nputer.fs.write(path, data, options)\n```\n\n## Parameters\n#### `path` (string) (required)\nThe path to the file to write to.\nIf path is not absolute, it will be resolved relative to the app's root directory.\n\n#### `data` (string|File|Blob)\n"}