{"chunk":2,"numChunks":47,"fileHash":"DS6QWbTdrmdJEfNC8Ec7aEISJw5n4IF3kMzfDlJvsks=","filePath":"attached_assets/Puterexamples.md","content":"    \\<script src=\"https://js.puter.com/v2/\"\\>\\</script\\>  \n    \\<script\\>  \n        async function kvDemo() {  \n            // Set a value  \n            await puter.kv.set('user\\_preference', 'dark\\_mode');  \n            puter.print('Preference saved\\<br\\>');\n\n            // Get the value  \n            const preference \\= await puter.kv.get('user\\_preference');  \n            puter.print('User preference:', preference, '\\<br\\>');  \n        }\n\n        kvDemo();  \n    \\</script\\>  \n\\</body\\>  \n\\</html\\>\n\nIn this example, we're using the [puter.kv.set](https://docs.puter.com/KV/set/) function to save a user preference to the cloud key-value store. We then use the [puter.kv.get](https://docs.puter.com/KV/get/) function to retrieve the preference and print it to the console. You can replace the key and value with your own data.\n\n## **Example 4**\n\n## Authentication\n\nPuter.js handles authentication automatically. When your code tries to access any cloud services, the user will be prompted to sign in with their Puter.com account if they haven't already. You can build your app as if the user is already signed in, and Puter.js will handle the authentication process for you when needed.\n\nIf you want to explicitly check if a user is signed in or trigger the sign-in process, you can use the following methods:\n\n\\<html\\>  \n\\<body\\>  \n    \\<script src=\"https://js.puter.com/v2/\"\\>\\</script\\>  \n    \\<script\\>  \n        async function authDemo() {  \n            // Check if user is signed in  \n            const isSignedIn \\= puter.auth.isSignedIn();  \n"}