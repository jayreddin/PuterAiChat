{"chunk":22,"numChunks":47,"fileHash":"DS6QWbTdrmdJEfNC8Ec7aEISJw5n4IF3kMzfDlJvsks=","filePath":"attached_assets/Puterexamples.md","content":"            alert('Inventory cleared\\!');  \n            productList.innerHTML \\= '';  \n        });  \n    \\</script\\>  \n\\</body\\>  \n\\</html\\>\n\nThis example demonstrates how to use the [list](https://docs.puter.com/KV/list/) method to retrieve multiple keys matching a pattern, and how to perform batch operations by iterating over the results.\n\n## **Example 4**\n\n## Atomic Operations\n\nPuter.js also supports atomic increment and decrement operations, which are useful for counters or any numeric values that need to be updated concurrently.\n\n\\<html\\>  \n\\<body\\>  \n    \\<h1\\>Visit Counter\\</h1\\>  \n    \\<p\\>This page has been visited \\<span id=\"visit-count\"\\>0\\</span\\> times.\\</p\\>  \n    \\<button id=\"reset-count\"\\>Reset Count\\</button\\>\n\n    \\<script src=\"https://js.puter.com/v2/\"\\>\\</script\\>  \n    \\<script\\>  \n        const countDisplay \\= document.getElementById('visit-count');  \n        const resetButton \\= document.getElementById('reset-count');\n\n        async function updateVisitCount() {  \n            const count \\= await puter.kv.incr('visit\\_count');  \n            countDisplay.textContent \\= count;  \n        }\n\n        resetButton.addEventListener('click', async () \\=\\> {  \n            await puter.kv.set('visit\\_count', '0');  \n            countDisplay.textContent \\= '0';  \n        });\n\n        updateVisitCount();  \n    \\</script\\>  \n\\</body\\>  \n\\</html\\>\n\nThis example uses the [incr](https://docs.puter.com/KV/incr/) method to atomically increment a counter, ensuring accurate counts even with concurrent updates. That's it\\!\n\n"}