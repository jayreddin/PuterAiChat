{"chunk":18,"numChunks":84,"fileHash":"El6foAc1cQ0gdsDTMfa4vfsgZ6DJGHS6FzgKj2FOX9U=","filePath":"attached_assets/Puter.md","content":"File: Drivers/call.md\n-->\n\nA low-level function that allows you to call any driver on any interface. This function is useful when you want to call a driver that is not directly exposed by Puter.js's high-level API or for when you need more control over the driver call.\n\n## Syntax\n```js\nputer.drivers.call(interface, driver, method)\nputer.drivers.call(interface, driver, method, args = {})\n```\n\n## Parameters\n#### `interface` (String) (Required)\nThe name of the interface you want to call.\n\n#### `driver` (String) (Required)\nThe name of the driver you want to call.\n\n#### `method` (String) (Required)\nThe name of the method you want to call on the driver.\n\n#### `args` (Array) (Optional)\nAn object containing the arguments you want to pass to the driver.\n\n## Return value\n\nA `Promise` that will resolve to the result of the driver call. The result can be of any type, depending on the driver you are calling.\n\nIn case of an error, the `Promise` will reject with an error message.\n\n\n<!--\nFile: FS/copy.md\n-->\n\nCopies a file or directory from one location to another. \n\n## Syntax\n\n```js\nputer.fs.copy(source, destination)\nputer.fs.copy(source, destination, options)\n```\n\n## Parameters\n#### `source` (String) (Required)\nThe path to the file or directory to copy.\n\n#### `destination` (String) (Required)\nThe path to the destination directory. If destination is a directory then the file or directory will be copied into that directory using the same name as the source file or directory. If the destination is a file, we overwrite if overwrite is `true`, otherwise we error.\n\n#### `options` (Object) (Optional)\nThe options for the `copy` operation. The following options are supported:\n"}