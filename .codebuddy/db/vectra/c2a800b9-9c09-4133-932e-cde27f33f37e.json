{"chunk":46,"numChunks":47,"fileHash":"DS6QWbTdrmdJEfNC8Ec7aEISJw5n4IF3kMzfDlJvsks=","filePath":"attached_assets/Puterexamples.md","content":"    \\<script src=\"https://js.puter.com/v2/\"\\>\\</script\\>  \n    \\<img src=\"https://assets.puter.site/doge.jpeg\" id=\"image\"\\>  \n    \\<script\\>  \n        puter.ai.chat(  \n            \"What do you see in this image?\",  \n            \"https://assets.puter.site/doge.jpeg\"  \n        ).then(response \\=\\> {  \n            document.write(response);  \n        });  \n    \\</script\\>  \n\\</body\\>  \n\\</html\\>\n\nThis example shows how to use GPT-4 Vision capabilities to analyze images. You can pass an image URL as the second parameter to have the AI analyze its contents.\n\n## Best Practices\n\nWhen implementing AI in your web applications with Puter.js:\n\n1. Choose the appropriate model for your use case:  \n   * GPT-4o mini: Best for quick, general-purpose responses  \n   * Claude 3.5 Sonnet: Ideal for complex analysis and technical tasks  \n   * Llama: Good for general tasks with different model sizes available  \n   * GPT-4o: Best for vision-related tasks  \n2. Use streaming for longer responses to improve user experience  \n3. Handle errors gracefully and provide feedback to users when the AI is processing  \n4. Consider rate limiting your requests to ensure fair usage\n"}