{"chunk":41,"numChunks":47,"fileHash":"DS6QWbTdrmdJEfNC8Ec7aEISJw5n4IF3kMzfDlJvsks=","filePath":"attached_assets/Puterexamples.md","content":"        const file \\= imageInput.files\\[0\\];  \n        if (\\!file) {  \n            alert('Please select an image first');  \n            return;  \n        }\n\n        result.textContent \\= 'Processing image...';  \n          \n        try {  \n            // Convert file to data URL  \n            const dataUrl \\= await new Promise((resolve) \\=\\> {  \n                const reader \\= new FileReader();  \n                reader.onload \\= () \\=\\> resolve(reader.result);  \n                reader.readAsDataURL(file);  \n            });  \n              \n            // Now pass the data URL to img2txt  \n            const text \\= await puter.ai.img2txt(dataUrl);  \n            result.textContent \\= text || 'No text found in image';  \n        } catch (error) {  \n            result.textContent \\= 'Error: ' \\+ error.message;  \n        }  \n    }     \n    \\</script\\>  \n\\</body\\>  \n\\</html\\>\n\nThis example shows how to handle file uploads for OCR. It includes an image preview feature and processes local image files directly. The OCR function works with File objects just as easily as with URLs.\n\n## **Example 3**\n\n## Batch OCR Processing\n\nHere's an example that processes multiple images and saves the results:\n\n\\<html\\>  \n\\<body\\>  \n    \\<script src=\"https://js.puter.com/v2/\"\\>\\</script\\>  \n      \n    \\<div\\>  \n        \\<h3\\>Batch OCR Processing\\</h3\\>  \n        \\<input type=\"file\" id=\"image-input\" accept=\"image/\\*\" multiple\\>  \n        \\<button onclick=\"processBatch()\"\\>Process All Images\\</button\\>  \n          \n        \\<div id=\"progress\"\\>\\</div\\>  \n          \n        \\<div style=\"margin-top: 20px;\"\\>  \n"}