{"chunk":25,"numChunks":47,"fileHash":"DS6QWbTdrmdJEfNC8Ec7aEISJw5n4IF3kMzfDlJvsks=","filePath":"attached_assets/Puterexamples.md","content":"const fileInput \\= document.getElementById('file-input');  \nconst resultDiv \\= document.getElementById('result');\n\nThese lines get references to our HTML elements so we can access the selected file and update the result message.\n\nif (fileInput.files.length \\> 0\\) {\n\nThis checks if the user has actually selected any files. The files property is an array-like object containing all selected files.\n\nconst uploadedFile \\= await puter.fs.upload(fileInput.files);\n\nThis is where the actual upload happens. The puter.fs.upload() method handles the entire upload process to Puter's cloud storage. The await keyword makes our code wait for the upload to complete before continuing.\n\nresultDiv.innerHTML \\= \\`File uploaded successfully\\! Path: ${uploadedFile.path}\\`;\n\nAfter a successful upload, this displays a success message showing where the file was stored in the cloud. The uploadedFile.path gives us the file's location in Puter's storage system.\n\n} catch (error) {  \n    resultDiv.innerHTML \\= \\`Error uploading file: ${error.message}\\`;  \n}\n\nThis error handling code catches any problems during the upload (like network issues or file size limits) and displays the error message to the user.\n\n} else {  \n    resultDiv.innerHTML \\= 'Please select a file to upload.';  \n}\n\nIf the user clicks upload without selecting a file, this provides feedback asking them to select a file first.\n\nThat's it\\! You now have a free and powerful file upload solution using Puter.js. This allows you to add file upload capabilities to your web applications without worrying about server-side implementation or storage costs.\n\n## Additional Features\n\n"}