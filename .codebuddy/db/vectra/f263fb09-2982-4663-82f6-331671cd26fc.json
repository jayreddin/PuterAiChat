{"chunk":11,"numChunks":47,"fileHash":"DS6QWbTdrmdJEfNC8Ec7aEISJw5n4IF3kMzfDlJvsks=","filePath":"attached_assets/Puterexamples.md","content":"            'Solve this puzzle: If you have 9 coins and one is counterfeit (lighter), how can you identify it with just 2 weighings on a balance scale?',  \n            {model: 'deepseek-chat', stream: true}  \n        );  \n        document.write('\\<h2\\>DeepSeek Chat Solution:\\</h2\\>');  \n        for await (const part of chat\\_resp) {  \n            if (part?.text) {  \n                document.write(part.text.replaceAll('\\\\n', '\\<br\\>'));  \n            }  \n        }\n\n        // DeepSeek Reasoner  \n        const reasoner\\_resp \\= await puter.ai.chat(  \n            'Solve this puzzle: If you have 9 coins and one is counterfeit (lighter), how can you identify it with just 2 weighings on a balance scale?',  \n            {model: 'deepseek-reasoner', stream: true}  \n        );  \n        document.write('\\<h2\\>DeepSeek Reasoner Solution:\\</h2\\>');  \n        for await (const part of reasoner\\_resp) {  \n            if (part?.text) {  \n                document.write(part.text.replaceAll('\\\\n', '\\<br\\>'));  \n            }  \n        }  \n    })();  \n    \\</script\\>  \n\\</body\\>  \n\\</html\\>\n\n## Best Practices\n\n1. Use streaming for longer responses to provide better user experience  \n2. Consider the specific strengths of each model when choosing which to use  \n3. Handle errors gracefully and provide feedback during processing  \n4. Use appropriate error handling for network issues or API failures  \n5. Consider implementing retry logic for failed requests\n\nThat's it\\! You now have free access to DeepSeek's powerful language models using Puter.js. This allows you to add sophisticated AI capabilities to your web applications without worrying about API keys or usage limits.\n\nâ€”----------------------------------------------------------------------------------------------\n\n"}