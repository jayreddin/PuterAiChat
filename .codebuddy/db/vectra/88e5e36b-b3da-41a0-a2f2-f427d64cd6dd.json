{"chunk":49,"numChunks":84,"fileHash":"El6foAc1cQ0gdsDTMfa4vfsgZ6DJGHS6FzgKj2FOX9U=","filePath":"attached_assets/Puter.md","content":"2. `parent` sends a message, `\"Hello!\"`, to `child`\n3. `child` shows that message in an alert dialog.\n4. `child` sends a message back.\n5. `parent` receives the message and logs it.\n6. `parent` closes the child app.\n\n```html\n<html>\n<head>\n    <title>Parent app</title>\n</head>\n<body>\n    <script src=\"https://js.puter.com/v2/\"></script>\n    <script>\n        // This app is the parent\n        \n        // Launch child (1)\n        const child = await puter.ui.launchApp('child');\n        \n        // Listen to messages from the child app. (5)\n        child.on('message', msg => {\n            console.log('Parent app received a message from child:', msg);\n            console.log('Closing child app.');\n            \n            // Close the child (6)\n            child.close();\n        });\n        \n        // Send a message to the child (2)\n        child.postMessage('Hello!');\n    </script>\n</body>\n</html>\n\n<!------------------->\n\n<html>\n<head>\n    <title>Child app</title>\n</head>\n<body>\n<script src=\"https://js.puter.com/v2/\"></script>\n<script>\n    // This app is the child\n    \n    // Get a connection to our parent.\n    const parent = puter.ui.parentApp();\n    if (!parent) {\n        // We were not launched by the parent.\n        // For this example, we'll just exit.\n        puter.exit();\n    } else {\n        // We were launched by the parent, and can communicate with it.\n        \n        // Any time we get a message from the parent, show it in an alert dialog. (3)\n        parent.on('message', msg => {\n            puter.ui.alert(msg);\n            \n            // Send a message back (4)\n            // Messages can be any JS object that can be cloned.\n"}