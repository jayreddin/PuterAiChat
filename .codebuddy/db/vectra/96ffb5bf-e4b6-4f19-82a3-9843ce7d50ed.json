{"chunk":0,"numChunks":1,"fileHash":"ghTGWOUuB5V/bmNVQqdOrfchTzkz0s/nqPzrprmyGuc=","filePath":"client/src/contexts/chat-input-context.tsx","content":"import React, { createContext, useState, useContext, ReactNode, useCallback } from \"react\";\ninterface ChatInputContextType {\n  model: string;\n  setModel: (model: string) => void;\n  message: string;\n  setMessage: (message: string) => void;\n  isProcessing: boolean;\n  setIsProcessing: (isProcessing: boolean) => void;\n  sendMessage: () => void;\n  setSendMessageHandler: (handler: () => void) => void;\n  insertText?: (text: string) => void;\n}\nconst defaultModel = \"gpt-4o-mini\"; // Default model\nconst ChatInputContext = createContext<ChatInputContextType | undefined>(undefined);\nexport const ChatInputProvider = ({ children }: { children: ReactNode }) => {\n  const [model, setModel] = useState<string>(defaultModel);\n  const [message, setMessage] = useState<string>(\"\");\n  const [isProcessing, setIsProcessing] = useState<boolean>(false);\n  const [sendMessageHandler, setSendMessageHandler] = useState<() => void>(() => {\n    // Default implementation\n    return () => console.log(`Default sendMessage with model: ${model}`);\n  });\n\n  const sendMessage = useCallback(() => {\n    sendMessageHandler();\n  }, [sendMessageHandler]);\n\n  const insertText = (text: string) => {\n    // Implementation for inserting text\n  };\n\n  return (\n    <ChatInputContext.Provider\n      value={{\n        model,\n        setModel,\n        message,\n        setMessage,\n        isProcessing,\n        setIsProcessing,\n        sendMessage,\n        setSendMessageHandler,\n        insertText,\n      }}\n    >\n      {children}\n    </ChatInputContext.Provider>\n  );\n};"}