{"chunk":12,"numChunks":15,"fileHash":"uafVARK9P9xA1Ty1o0C2va3COenZCiNJZ6xw3GDiHkU=","filePath":"client/src/components/chat/chat-container.tsx","content":"import { useEffect, useRef, useState, forwardRef } from \"react\";\nexport const ChatContainer = forwardRef<HTMLDivElement, ChatContainerProps>(({ conversation, onUpdate }, ref) => {\n  const handleSend = async (content: string) => {\n    try {\n      console.log('Sending chat request:', {\n        model: conversation.model,\n        content\n      });\n\n      // Call Puter AI API - Added check for window.puter\n      if (typeof window !== 'undefined' && window.puter) {\n        const response = await window.puter.ai.chat(content, {\n          model: conversation.model\n        });\n        console.log('Received response:', response);\n\n        // Extract the AI's response text based on the model's response format\n        let aiResponse: string;\n        if (response?.message?.content) {\n          // Handle simple string content\n          if (typeof response.message.content === 'string') {\n            aiResponse = response.message.content;\n          }\n          // Handle array of content blocks (Claude format)\n          else if (Array.isArray(response.message.content)) {\n            aiResponse = response.message.content\n              .filter(block => block.type === 'text')\n              .map(block => block.text)\n              .join('\\n');\n          }\n          else {\n            throw new Error(\"Unexpected response format from AI\");\n          }\n        } else {\n          throw new Error(\"Invalid response from AI\");\n        }\n\n        // Add AI response\n        const finalConvo = addMessage(conversation.id, {\n          content: aiResponse,\n          role: \"assistant\",\n          timestamp: Date.now(),\n          model: conversation.model,\n        });\n\n        if (finalConvo) {\n          onUpdate(finalConvo);\n        }\n      } else {\n        console.error(\"Puter is not initialized.\");\n        toast({\n          title: \"Error\",\n          description: \"Puter AI is not available. Please try again later.\",\n          variant: \"destructive\"\n        });\n      }\n    } catch"}