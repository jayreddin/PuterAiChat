{"chunk":8,"numChunks":23,"fileHash":"9RZcmhwqdFl3MetiAghAa+84qGc1w3byxMCQc/QGQ8Q=","filePath":"client/src/components/ui/chart.tsx","content":"import * as React from \"react\"\nconst ChartTooltipContent = React.forwardRef<\n>(\n  (\n  ) => {\n    const { config } = useChart()\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n    if (!active || !payload?.length) {\n      return null\n    }\n    const nestLabel = payload.length === 1 && indicator !== \"dot\""}