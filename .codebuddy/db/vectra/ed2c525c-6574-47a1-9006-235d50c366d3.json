{"chunk":33,"numChunks":47,"fileHash":"DS6QWbTdrmdJEfNC8Ec7aEISJw5n4IF3kMzfDlJvsks=","filePath":"attached_assets/Puterexamples.md","content":"                const saved \\= await puter.kv.get('gameData');  \n                if (saved) {  \n                    playerData \\= JSON.parse(saved);  \n                    updateUI();  \n                    alert('Game loaded\\!');  \n                } else {  \n                    alert('No saved game found');  \n                }  \n            } catch (error) {  \n                alert('Failed to load: ' \\+ error);  \n            }  \n        }  \n    \\</script\\>  \n\\</body\\>  \n\\</html\\>\n\nThis first example demonstrates the basics of saving and loading game data. The code maintains a simple game state with gold and level variables, storing them in Puter's key-value store. When a player clicks \"Save Game\", their current progress is converted to JSON and stored in the cloud with a timestamp. The \"Load Game\" button retrieves this data and restores their progress.\n\nKey points about this example:\n\n* Game state is kept in a single object, making it easy to save and load  \n* The lastSaved timestamp helps track when the game was last saved  \n* Data is stored using [puter.kv.set()](https://docs.puter.com/KV/set/) which handles all the cloud storage details  \n* JSON is used to convert the game state to a format that can be stored\n\n## **Example 2**\n\n## Auto-Save System\n\nHere's how to implement an auto-save system that saves after important actions:\n\n\\<html\\>  \n\\<body\\>  \n    \\<script src=\"https://js.puter.com/v2/\"\\>\\</script\\>  \n      \n    \\<div\\>  \n        \\<h3\\>RPG Character\\</h3\\>  \n        \\<p\\>Health: \\<span id=\"health\"\\>100\\</span\\>\\</p\\>  \n        \\<p\\>Experience: \\<span id=\"xp\"\\>0\\</span\\>\\</p\\>  \n          \n"}